Vagrant.configure(2) do |config|
  config.vm.box = "puppetlabs/centos-6.6-64-nocm"
#config.vm.box = "centos/7"

  config.vm.provider "virtualbox" do |v|
    v.memory = 1024
  end

  config.vm.network :forwarded_port, id: "frontend", guest: 8080, host: 8100
  config.vm.network :forwarded_port, id: "ssh", guest: 22, host: 8222
  config.vm.network :forwarded_port, id: "dregistry", guest: 5000, host: 5000
  config.vm.network :forwarded_port, id: "rabbitmq", guest: 15672, host: 15672
  config.vm.provider :virtualbox do |vb|
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end
  config.vm.synced_folder "../../", "/home/vagrant/src"
  config.ssh.username = "vagrant"

  config.vm.provision "shell", privileged: true, inline: <<EOF
    yum update -y
    yum install -y git tree 
    yum install -y https://get.docker.com/rpm/1.7.1/centos-6/RPMS/x86_64/docker-engine-1.7.1-1.el6.x86_64.rpm
    
    sed -i 's/_args="/_args="--icc=false /i' /etc/sysconfig/docker # implement 2.2 security req from https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.6_Benchmark_v1.0.0.pdf
    service docker start
    usermod -a -G docker vagrant

    curl -sSL https://github.com/docker/compose/releases/download/1.4.2/docker-compose-Linux-x86_64 > /usr/local/bin/docker-compose-1.4.2
    chmod +x /usr/local/bin/docker-compose-1.4.2
    ln -s /usr/local/bin/docker-compose-1.4.2 /usr/bin/docker-compose
EOF

  config.vm.provision "shell", privileged: true, inline: <<EOF
    # install local registry, under root
    echo "127.0.0.1 localhost" >> /etc/hosts # somehow needed on this box
    pushd /home/vagrant/src/registry
    bash -x install.sh
    sleep 3
    openssl s_client -connect localhost:5000 -showcerts </dev/null 2>/dev/null | openssl x509 -outform PEM # not sure why sometimes this call fails first time, so rather fail here before next steps
    bash -x ../deploy/reg-connect.sh --renew-certs --login-user=`head -1 /data/menagerie/volumes/registry/auth/cred` --login-pass=`tail -1 /data/menagerie/volumes/registry/auth/cred`
    runuser -l vagrant -c 'echo "`id vagrant`"'
    runuser -l vagrant -c '/home/vagrant/src/deploy/reg-connect.sh --login-user=`sudo head -1 /data/menagerie/volumes/registry/auth/cred` --login-pass=`sudo tail -1 /data/menagerie/volumes/registry/auth/cred`'
    popd
EOF

  config.vm.provision "shell", privileged: false, inline: <<EOF
    curl -sSL http://golang.org/dl/go1.5.1.linux-amd64.tar.gz | tar -xz -C $HOME

    echo "export PATH=$HOME/go/bin:$PATH" >> ~/.bashrc
    echo "export GOROOT=$HOME/go" >> ~/.bashrc
    mkdir $HOME/menagerie
    ln -s /home/vagrant/src /home/vagrant/menagerie/current

EOF

  config.vm.provision "shell", privileged: true, inline: <<EOF
    # build menagerie and demo engine containers. Note: we DO NOT run this under
    # privileged:false, since this does executes the command under user vagrant,
    # but stripping the docker group. This causes docker-build to fail.
    runuser -l vagrant -c 'cd /home/vagrant/src && ./build.sh'
    runuser -l vagrant -c 'cd /home/vagrant/src/environments/generic-ami/demo.engine && ./build.sh'

    # finish install
    pushd /home/vagrant/src/deploy
    bash -x install.sh --restart-shared --reg-server=localhost:5000 --user=vagrant --deploy-env=generic-ami
    runuser -l vagrant -c 'ln -s /data/menagerie/volumes/frontend /home/vagrant/menagerie/shared'
    popd
EOF

end
